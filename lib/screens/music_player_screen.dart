import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rootBundle.loadString
import 'package:audioplayers/audioplayers.dart';
import 'package:volume_controller/volume_controller.dart';

class MusicPlayerScreen extends StatefulWidget {
  const MusicPlayerScreen({Key? key}) : super(key: key);

  @override
  State<MusicPlayerScreen> createState() => _MusicPlayerScreenState();
}

class _MusicPlayerScreenState extends State<MusicPlayerScreen>
    with TickerProviderStateMixin {
  late AudioPlayer _audioPlayer;
  bool isPlaying = false;
  bool isMuted = false;
  bool hasStarted = false; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  double _currentPosition = 0.0;
  double _totalDuration = 1.0;
  double _volume = 1.0; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 100%

  late AnimationController _rotationController;

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à (‡∏ñ‡∏π‡∏Å‡πÉ‡∏à)
  bool isFavorite = false;

  @override
  void initState() {
    super.initState();
    SystemChrome.setSystemUIOverlayStyle(const SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: Brightness.light,
    ));

    _audioPlayer = AudioPlayer();
    _rotationController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 10),
    );

    _setupAudioPlayer();
    _setupVolumeController();
  }

  void _setupAudioPlayer() async {
    try {
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PlayerMode ‡πÅ‡∏•‡∏∞ ReleaseMode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡πà‡∏≤‡∏ô Duration ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      await _audioPlayer.setPlayerMode(PlayerMode.mediaPlayer);
      await _audioPlayer.setReleaseMode(ReleaseMode.stop);

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏´‡∏•‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö AudioPlayer
      await _audioPlayer.setSource(AssetSource("audio/music.mp3"));
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 100% ‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
      await _audioPlayer.setVolume(1.0);
      print("üéµ Audio loaded and volume set to 1.0");
    } catch (e) {
      print("üö® Error loading audio: $e");
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Completer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ onDurationChanged ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    Completer<void> durationCompleter = Completer<void>();
    _audioPlayer.onDurationChanged.listen((Duration d) {
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤ Duration ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (d.inSeconds > 1 && !durationCompleter.isCompleted) {
        durationCompleter.complete();
      }
      setState(() {
        _totalDuration = d.inSeconds.toDouble();
      });
    });

    _audioPlayer.onPositionChanged.listen((Duration p) {
      setState(() {
        _currentPosition = p.inSeconds.toDouble();
      });
    });

    _audioPlayer.onPlayerComplete.listen((_) {
      setState(() {
        isPlaying = false;
        _rotationController.stop();
        hasStarted = false; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö
      });
    });

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ Duration ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ timeout ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    try {
      await durationCompleter.future.timeout(const Duration(seconds: 5));
    } catch (e) {
      print("üö® Timeout waiting for duration: $e");
    }

    // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ Duration ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á
    try {
      await _audioPlayer.play(AssetSource("audio/music.mp3"));
      setState(() {
        isPlaying = true;
        hasStarted = true;
      });
      _rotationController.repeat();
      print("üéµ Audio started playing");
    } catch (e) {
      print("üö® Error playing audio: $e");
    }
  }

  void _setupVolumeController() {
    // ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    VolumeController().getVolume().then((volume) {
      setState(() {
        _volume = volume;
        isMuted = _volume == 0.0;
      });
    });

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Listener ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    VolumeController().listener((volume) {
      setState(() {
        _volume = volume;
        isMuted = _volume == 0.0;
      });
    });
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    _rotationController.dispose();
    VolumeController().removeListener();
    super.dispose();
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô assets ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô Bottom Sheet ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡πÑ‡∏î‡πâ
  Future<void> _showLyrics(BuildContext context) async {
    String lyrics;
    try {
      // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå lyrics ‡∏à‡∏≤‡∏Å assets
      lyrics = await rootBundle.loadString('assets/lyrics/music_lyrics.txt');
    } catch (e) {
      lyrics = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ\n$e';
    }

    // ‡πÅ‡∏™‡∏î‡∏á Bottom Sheet ‡∏ó‡∏µ‡πà‡∏•‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡πÑ‡∏î‡πâ (DraggableScrollableSheet)
    showModalBottomSheet(
      context: context,
      isScrollControlled: true, // ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠‡πÑ‡∏î‡πâ
      backgroundColor: Colors.transparent, // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
      builder: (BuildContext context) {
        return DraggableScrollableSheet(
          initialChildSize: 0.5, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏à‡∏≠
          minChildSize: 0.3,     // ‡πÄ‡∏•‡πá‡∏Å‡∏™‡∏∏‡∏î 30% ‡∏Ç‡∏≠‡∏á‡∏à‡∏≠
          maxChildSize: 0.9,     // ‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î 90% ‡∏Ç‡∏≠‡∏á‡∏à‡∏≠
          builder: (BuildContext context, ScrollController scrollController) {
            return Container(
              decoration: const BoxDecoration(
                color: Colors.black87,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(16),
                  topRight: Radius.circular(16),
                ),
              ),
              child: SingleChildScrollView(
                controller: scrollController,
                padding: const EdgeInsets.all(16),
                child: Text(
                  lyrics,
                  style: const TextStyle(color: Colors.white),
                ),
              ),
            );
          },
        );
      },
    );
  }

  String _formatTime(double seconds) {
    final minutes = seconds ~/ 60;
    final sec = (seconds % 60).toInt();
    return '${minutes.toString().padLeft(2, '0')}:${sec.toString().padLeft(2, '0')}';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô Gradient ‡πÑ‡∏•‡πà‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÑ‡∏õ‡∏î‡∏≥
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Color(0xFF299D25),
              Color(0xFF202020),
              Color(0xFF121212),
            ],
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              // Top Bar
              _buildTopBar(),
              const SizedBox(height: 20),
              // ‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡πÅ‡∏ö‡∏ö‡∏´‡∏°‡∏∏‡∏ô
              _buildAlbumArt(),
              const SizedBox(height: 20),
              // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á + ‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô + ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à
              _buildSongInfo(),
              const SizedBox(height: 10),
              // ‡πÅ‡∏ñ‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏•‡∏á + ‡πÄ‡∏ß‡∏•‡∏≤
              _buildProgressBar(),
              const SizedBox(height: 10),
              // ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏û‡∏•‡∏á (Previous / Play-Pause / Next)
              _buildControlButtons(),
              const SizedBox(height: 20),
              // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á
              _buildVolumeControl(),
              const Spacer(),
              // ‡∏õ‡∏∏‡πà‡∏° Lyrics (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô Bottom Sheet)
              _buildLyricsButton(),
              const SizedBox(height: 20),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTopBar() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8.0),
      child: Row(
        children: [
          // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
          IconButton(
            onPressed: () => Navigator.pop(context),
            icon: const Icon(Icons.arrow_back, color: Colors.white),
          ),
          const Expanded(
            child: Center(
              child: Text(
                'NOW PLAYING',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
          // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π (‡∏à‡∏∏‡∏î‡∏™‡∏≤‡∏°‡∏à‡∏∏‡∏î)
          IconButton(
            onPressed: () {
              // TODO: ‡πÉ‡∏™‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            },
            icon: const Icon(Icons.more_vert, color: Colors.white),
          ),
        ],
      ),
    );
  }

  Widget _buildAlbumArt() {
    return RotationTransition(
      turns: _rotationController,
      child: Container(
        width: 240,
        height: 240,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          border: Border.all(color: Colors.white70, width: 4),
        ),
        child: ClipOval(
          child: Image.network(
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            'https://i.ytimg.com/vi/qguo-j5PxBE/hqdefault.jpg',
            fit: BoxFit.cover,
          ),
        ),
      ),
    );
  }

  Widget _buildSongInfo() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24.0),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á + ‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô) ‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á
                Text(
                  '‡∏ã‡πà‡∏≠‡∏ô(‡πÑ‡∏°‡πà)‡∏´‡∏≤',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                // ‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô
                const Text(
                  'Jeff Satur',
                  style: TextStyle(
                    color: Colors.white70,
                    fontSize: 16,
                  ),
                ),
              ],
            ),
          ),
          // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏´‡∏±‡∏ß‡πÉ‡∏à (‡∏Å‡∏î‡∏ñ‡∏π‡∏Å‡πÉ‡∏à) ‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤
          GestureDetector(
            onTap: () {
              setState(() {
                isFavorite = !isFavorite;
              });
            },
            child: Icon(
              isFavorite ? Icons.favorite : Icons.favorite_border,
              color: isFavorite ? Colors.greenAccent : Colors.white70,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProgressBar() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Column(
        children: [
          Slider(
            activeColor: Colors.white,
            inactiveColor: Colors.white54,
            min: 0,
            max: _totalDuration,
            value: _currentPosition.clamp(0, _totalDuration),
            onChanged: (value) {
              _audioPlayer.seek(Duration(seconds: value.toInt()));
            },
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                _formatTime(_currentPosition),
                style: const TextStyle(color: Colors.white),
              ),
              Text(
                _formatTime(_totalDuration),
                style: const TextStyle(color: Colors.white),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildControlButtons() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        IconButton(
          icon: const Icon(Icons.skip_previous, color: Colors.white),
          onPressed: () {
            // TODO: ‡πÉ‡∏™‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏á
          },
        ),
        InkWell(
          onTap: () async {
            if (isPlaying) {
              await _audioPlayer.pause();
              _rotationController.stop();
            } else {
              if (!hasStarted) {
                await _audioPlayer.play(AssetSource("audio/music.mp3"));
                hasStarted = true;
              } else {
                await _audioPlayer.resume();
              }
              _rotationController.repeat();
            }
            setState(() {
              isPlaying = !isPlaying;
            });
          },
          child: Icon(
            isPlaying ? Icons.pause_circle_filled : Icons.play_circle_fill,
            size: 60,
            color: Colors.white,
          ),
        ),
        IconButton(
          icon: const Icon(Icons.skip_next, color: Colors.white),
          onPressed: () {
            // TODO: ‡πÉ‡∏™‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          },
        ),
      ],
    );
  }

  Widget _buildVolumeControl() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Row(
        children: [
          IconButton(
            icon: Icon(
              isMuted ? Icons.volume_off : Icons.volume_up,
              color: Colors.white,
            ),
            onPressed: () {
              setState(() {
                isMuted = !isMuted;
                _volume = isMuted ? 0.0 : 1.0;
                _audioPlayer.setVolume(_volume);
                VolumeController().setVolume(_volume);
              });
            },
          ),
          Expanded(
            child: Slider(
              activeColor: Colors.white,
              inactiveColor: Colors.white54,
              min: 0,
              max: 1,
              value: _volume,
              onChanged: (value) {
                setState(() {
                  _volume = value;
                  isMuted = _volume == 0.0;
                  _audioPlayer.setVolume(value);
                  VolumeController().setVolume(value);
                });
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLyricsButton() {
    return GestureDetector(
      onTap: () => _showLyrics(context),
      child: const Text(
        'LYRICS',
        style: TextStyle(
          color: Colors.white,
          fontSize: 16,
          decoration: TextDecoration.underline,
        ),
      ),
    );
  }
}
